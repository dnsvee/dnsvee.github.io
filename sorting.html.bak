<!doctype html5>
<html>
	<head>
		<link href='styles.css' rel='stylesheet'/>
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/styles/default.min.css" integrity="sha512-3xLMEigMNYLDJLAgaGlDSxpGykyb+nQnJBzbkQy2a0gyVKL2ZpNOPIj1rD8IPFaJbwAgId/atho1+LBpWu5DhA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
		<style>
#td1 {
	background-color: lightblue;
	padding-right: 20px;
	border-right: 2px solid black;
}

			#td2 {
				background-color: lightgrey;
			}
		</style>
	</head>
	<body>

		<div id='flexy'>
			<a id='back' href='/index.html'>Back</a>
			<div id='middle'>
				<h1>Sorting algorithms in JavaScript</h1>
				<p>Here are some of my personal implementations for several sorting algorithms. For each algorithm a small explanation is giving and the source code is shown. The last section runs a performance comparison against each algorithm.</p> 

					
					<h2 id='header'>Swap sort</h2>
					<p>Scan the entire array and repeatedly swap two elements when they are out of order. Stop when no elements needed to be swapped after scanning the entire array.</p>
					<p id='swapsort_source'></p>

					<h2>Quick sort</h2>
					<p>Choose an appropriate value, the pivot, for the array to be sorted that splits it in halves of roughly equal size. Create three new arrays; one with all the values smaller than the pivot; one with all the values equal  to the pivot; and one with all the values larger than the pivot. Recursively run quicksort on the resulting halves with smaller/larger values. Concatenate the array with sorted smaller values, the array with values equal to the pivot, and the array with sorted larger values.
					<p id='quicksort_source'></p>

					<h2>Merge sort</h2>
					<p>First step is to recursively divide the unsorted array in two equally sized halves. Then keep dividing each half until the halved array as no or one element. Then merge each of these array into larger ones until all are merged into one array. Merging two sorted arrays into one sorted array can be done with reasonable efficiency.</p>
					<p id='mergesort_source'></p>

					<h2>Selection sort</h2>
					<p>Loop over all unsorted elements to find the lowest value and place it at the front of the array in it's proper position. Lowest value in index 1, second lowest in index 2 etc. After every step the front of the array which contains the sorted values becomes larger and the last part of the array which stores the unsorted part becomes smaller.</p>
					<p id='selectionsort_source'></p>


					<h2>Insertion sort</h2>

					<p>Split the array into two parts. First part is sorted. Second part unsorted. On each iteration select the first element from the unsorted part and repeatedly swap it down into the correct place.</p>
					<p id='insertionsort_source'></p>


					<h2>Heap sort</h2>
					<p>A binary heap is an array that contains a binary tree. A parent node of index i has child nodes at location i * 2 and i * 2 + 1. A max. heap has at it's root the maximum value of the array. Take an unsorted array and turn it into a heap by ensuring the parent/child relationship holds for each node. By repeatedly popping off this max. value and placing it in the correct place at the end of the array you can sort the unsorted array. On each step the heap becomes one smaller and the sorted array one larger.</p>
					<p id='heapsort_source'></p>

					<h2 id='perfh2'>Performance test (sort 1000 random numbers)</h2>
					<label id='report'>
					</label>

	
			</div>

			<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/highlight.min.js" integrity="sha512-MinqHeqca99q5bWxFNQEQpplMBFiUNrEwuuDj2rCSh1DgeeTXUgvgYIHZ1puBS9IKBkdfLMSk/ZWVDasa3Y/2A==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
			<script src='sorting.js' type='text/javascript'>
			</script>
	</body>
</html>
